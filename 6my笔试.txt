1.border顺序
p{  border:5px   solid red;}

2.localStorage存取
localStorage.setItem("c",3)
var c= localStorage.getItem("c");

3.yield
{
 value: 12, // yield后面跟着的字面量值,变量值或者表达式的计算值。或者是最终return语句返回的值，没有return则为undefined
 done: false // 表示生成器函数中是否还有yield语句。false表示还有，true表示已经迭代完成。
}
它返回一个  Generator  对象。
function* anotherGenerator(i) {
  yield i + 1;
  yield i + 2;
  yield i + 3;
}

function* generator(i){
  yield i;
  yield* anotherGenerator(i);// 移交执行权
  yield i + 10;
}

var gen = generator(10);

console.log(gen.next().value); // 10
console.log(gen.next().value); // 11
console.log(gen.next().value); // 12 可传参代替i
console.log(gen.next().value); // 13
console.log(gen.next().value); // 20

3.发送邮件
<a href="mailto:3294527206@qq.com">发送邮件</a>

4.最大值
Math.max(...arr);
Math.max.apply(null, numArray);

5.export import
export {name1,name2, …,nameN};
export let name1,name2, …,nameN;

6.阻止事件
阻止默认事件：
e.preventDefault()
e.returnValue = false  (IE)
阻止冒泡：
e.stopPropagation()
e.cancelBubble = true (IE)

7.默认magin
body img form

8.服务端推送技术方案
轮询：资源占用高
长轮询：消息交替时延迟  （服务端当有数据或者超时后返回，
长链接：及时；链接多时占用高

9.跨域请求
withCredentials=1才能携带cookie

10.url到页面展现
dns解析
    - 先在本地host查找
    - 到浏览器dns缓存查找
    - 到根域名服务器查找
    - 找主域名服务器查找
    - 返回ip地址
没有缓存，建立tcp连接
    - 三次握手 syn -> syn+ack -> fin
    - 建立SSL通信，客户端携带随机数，支持的加密算法列表请求443端口 -> 服务端返回数字证书+公钥+随机数b -> 客户端验证证书有效性生成随机数c，用某种加密算法根据abc生成对称密钥，并返回给服务端 -> 服务端私钥解密，得到对称密钥，然后双方使用对称密钥通信
    // - 复杂请求，先发起option请求检验服务可用性
    - 接收数据包（请求头，请求行，请求体）根据content-type进行解码，根据不同资源类型进行不同的加载策略
    - 四次挥手 syn -> syn + ack -> fin -> ack + fin
浏览器渲染
  DOM树 + CSSOM = render树 ->layout->painting->display
  reflow:根据各种样式来计算，并根据计算结果将元素放在它该出现的位置(改dom改css改窗口)
  repaint...
  //减少DOM操作，集中修改CSS，独立出DOM来
优化：
  1.资源合并，减少http请求
  2.DNS预解析
  3.利用浏览器缓存 强弱缓存
  4.CDN 由缓存服务器直接响应用户请求
  5.非核心代码异步加载 defer async（html解析完毕后开始加载
阻塞：
CSS 不会阻塞 DOM 的解析，但会阻塞 DOM 渲染。
JS 阻塞 DOM 解析，但浏览器会"偷看"DOM，预先下载相关资源。
浏览器遇到 <script>且没有defer或async属性的 标签时，会触发页面渲染，因而如果前面CSS资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本


11.去重
function unique (arr) {
    return Array.from(new Set(arr))
}

12.三栏布局
float;absolute;flex;table;grid
flex的一些设置：flex:1 1 auto
                justify-content:center
                display:-webkit-flex
对双盒子也实用的居中
  .parent {
      text-align: center;
  }
  .child {
      display: inline-block;
  }
13.错误
window.addEventListener("error", fn);
try catch

14.虚拟DOM
虚拟DOM不会立即操作DOM，而是将这n次更新的diff内容保存到本地一个JS对象中，最终将这个JS对象一次性attch到DOM树上

15.ES6
let i = ''
let const块作用域
模板字符串` ${} `
箭头函数和this
for in遍历的是键名，而for of遍历的是值。【v-of v-show
class

16.H5特性
语义化标签
audio video
HTML Drag & Drop拖放
HTML Local Storage 本地存储
HTML5Shiv 的js补丁  
闭合标签

17.常用API
let sum = arr.reduce((a,b)=>a+b) //sum数组之和，reduce接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。
arr.includes('value');//数组是否包含某值
obj.hasOwnProperty('name')//对象是否包含某种属性 基于hash所以o(1)

18.常用数据结构
//链表
function Node(element) {
    this.element = element;   //当前节点的元素
    this.next = null;         //下一个节点链接
}

19.动态规划
dp(j)=grid(i,j)+min(dp(j),dp(j+1))//判断三种情况

20.自适应
@media screen and (max-width: 300px) {
    body {
        background-color:lightblue;
    }
}